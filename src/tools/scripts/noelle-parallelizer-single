#!/bin/bash

if test $# -lt 2 ; then
  echo "USAGE: `basename $0` BITCODE NUMBER_OF_LOOPS [TIMEOUT_S]"
  echo
  echo "Tool for parallelizing one loop at a time"
  echo
  echo "BITCODE          Input bitcode with parallel plan and API already linked."
  echo "                 Generally this file is code_to_parallelize.bc"
  echo "NUMBER_OF_LOOPS  Total number of loop with a parallel plan, a.k.a. loops"
  echo "                 with a noelle.parallelizer.looporder attribute attached" 
  echo "                 to an instruction in the header."
  echo "TIMEOUT          Seconds after which the executable will be interruped"
  echo "                 causing a non-zero return code."
  echo "                 If not specified the binary will not be run."
  exit 1
fi

inputBitcode=$1
numLoops=$2
digitCount=`echo -n "$numLoops" | wc -c`
prefix="Selector:"

showReturnCode() {
  prefix=$1
  retCode=$2
  if test $retCode -eq 0 ; then
    colorRetCode="\033[1;32m$retCode\033[0m"
  else
    colorRetCode="\033[1;31m$retCode\033[0m"
  fi
  echo -e "${prefix}     returned code $colorRetCode"
}

for ((i=0; i<numLoops; i++)); do
  echo -e "${prefix} \033[1;37mloop index ${i}\033[0m"
  echo "${prefix}   running noelle-parallelizer-loop"

  i_pad=`printf "%0${digitCount}i" $i`

  # creating the parallelized bitcode.
  # only loop number $i will be parallelized.
  # NOTE: this number is NOT related in any way to the
  # noelle.parallelizer.looporder attribute in the IR
  #
  noelle-parallelizer-loop $inputBitcode \
    -o code_to_parallelize.loop${i_pad}.bc \
    -noelle-parallelizer-force \
    -alloc-aa-verbose=1 \
    <<< "$i" \
    > loop${i_pad}.log 2>&1

  showReturnCode $prefix $?

  # creating the executable
  #
  echo "${prefix}   running clang++"
  clang++ code_to_parallelize.loop${i_pad}.bc \
    Parallelizer_utils.bc \
    -o parallelized_loop${i_pad} \
    -pthreads

  showReturnCode $prefix $?

  # conditionally run the executable
  #
  if test $# -ge 3 ; then
    timeout=$3
    echo "${prefix}   running parallelized_loop${i_pad}"
    timeout ${timeout}s ./parallelized_loop${i_pad} `cat input.txt` \
      > /dev/null

    showReturnCode $prefix $?
  fi
  
done

