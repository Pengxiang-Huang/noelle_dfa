#!/bin/bash

installDir

usage() {
  echo "USAGE: `basename $0` INPUT_BC [OPTIONS]..."
  echo
  echo "Tool for parallelizing one loop at a time"
  echo
  echo "INPUT_BC        Input bitcode with parallel plan and API already linked."
  echo "                Generally this file is code_to_parallelize.bc"
  echo
  echo "Options:"
  echo "--timeout       Seconds after which the executable will be interruped"
  echo "                causing a non-zero return code."
  echo "                If not specified the binary will not be run."
  echo "--args          Arguments to the executable."
  echo "--help          Display this message."
}

showReturnCode() {
  prefix=$1
  retCode=$2
  if test $retCode -eq 0 ; then
    colorRetCode="\033[1;32m$retCode\033[0m"
  else
    colorRetCode="\033[1;31m$retCode\033[0m"
  fi
  echo -e "${prefix}     returned code $colorRetCode"
}

#------ Beginning --------------------------------------------------------------#

if test $# -lt 1 ; then
  usage
  exit 1
fi

# Defaults
#
timeout=600 # 10 minutes
executeBin="n"
args=""

# Parsing arguments
#
inputBC="$1"
for arg in "$@"; do
  case ${arg} in
    --args=*)
      args="${arg#*=}"
      executeBin="y"
      shift
      ;;
    --timeout=*)
      timeout="${arg#*=}"
      executeBin="y"
      shift
      ;;
    --help)
      usage
      exit 0
      ;;
    -*|--*)
      echo "ERROR: Unknown option $arg"
      usage
      exit 1
      ;;
    *)
      ;;
  esac
done

digitCount=`echo -n "$numLoops" | wc -c`
prefix="Selector:"

if [ "$executeBin" == "y" ]; then
  echo "${prefix} The executable will run"
  echo "${prefix}   Arguments: $args"
  echo "${prefix}   Timeout: $timeout seconds"
else
  echo "${prefix} The executable will not run"
fi

# loopsInfo=`noelle-parallelizer-info $inputBC`
loopsInfo=`noelle-plan-info $inputBC 2>&1 | grep "PlanInfo"`
numLoops=$(echo "$loopsInfo" | grep "parallel plan" | egrep -o "[0-9]+")
echo "$loopsInfo"

for ((i=0; i<numLoops; i++)); do
  echo -e "${prefix} \033[1;37mloop index ${i}\033[0m"
  echo "${prefix}   running noelle-parallelizer-loop"

  i_pad=`printf "%0${digitCount}i" $i`

  # Creating the parallelized bitcode.
  # Only loop number $i will be parallelized.
  # NOTE: this number is NOT related in any way to the
  # noelle.parallelizer.looporder attribute in the IR
  #
  noelle-parallelizer-loop $inputBC \
    -o code_to_parallelize.loop${i_pad}.bc \
    -noelle-select-only-loops=$i \
    -noelle-parallelizer-force \
    -alloc-aa-verbose=1 \
    > loop${i_pad}.log 2>&1

  showReturnCode $prefix $?

  # Creating the executable
  #
  echo "${prefix}   running clang++"
  clang++ code_to_parallelize.loop${i_pad}.bc \
    Parallelizer_utils.bc \
    -o parallelized_loop${i_pad} \
    -pthreads

  showReturnCode $prefix $?

  # Conditionally run the executable
  #
  if [ "$executeBin" == "y" ]; then
    echo "${prefix}   running parallelized_loop${i_pad}"
    timeout ${timeout}s ./parallelized_loop${i_pad} "$args" \
      > /dev/null

    showReturnCode $prefix $?
  fi
  
done

